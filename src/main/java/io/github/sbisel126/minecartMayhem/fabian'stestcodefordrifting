private void startBoatControl(Player player, Boat boat) {
    final Map<Player, Boolean> isClimbing = new ConcurrentHashMap<>();
    final Map<Player, Boolean> isDrifting = new ConcurrentHashMap<>();
    final Map<Player, Long> driftStartTime = new ConcurrentHashMap<>();
    
    protocolManager.addPacketListener(new PacketAdapter(plugin, ListenerPriority.NORMAL, PacketType.Play.Client.STEER_VEHICLE) {
        @Override
        public void onPacketReceiving(PacketEvent event) {
            if (event.getPlayer() != player) return;

            PacketContainer packet = event.getPacket();
            StructureModifier<Boolean> booleans = packet.getStructures().read(0).getBooleans();

            if (booleans == null) return;

            boolean forward = booleans.read(0);
            boolean backward = booleans.read(1);
            boolean left = booleans.read(2);
            boolean right = booleans.read(3);

            boolean drifting = left && right; // Assume drifting is triggered by pressing both keys
            isDrifting.put(player, drifting);
            
            if (drifting && !driftStartTime.containsKey(player)) {
                driftStartTime.put(player, System.currentTimeMillis()); // Start drift timer
            }

            if (forward) {
                movementState.put(player, 1);
            } else if (backward) {
                movementState.put(player, -1);
            } else {
                movementState.put(player, 0);
            }
        }
    });

    new BukkitRunnable() {
        @Override
        public void run() {
            if (boat.isDead() || !player.isInsideVehicle() || !(player.getVehicle() instanceof Boat)) {
                this.cancel();
                movementState.remove(player);
                isClimbing.remove(player);
                isDrifting.remove(player);
                driftStartTime.remove(player);
                boat.remove();
                player.teleport(new Location(player.getWorld(), -24, -60, 574));
                return;
            }

            int state = movementState.getOrDefault(player, 0);
            boolean climbing = isClimbing.getOrDefault(player, false);
            boolean drifting = isDrifting.getOrDefault(player, false);
            
            Vector direction = boat.getLocation().getDirection().normalize();
            Vector velocity = boat.getVelocity();

            // Apply gravity when not on the ground
            if (!boat.isOnGround() && !climbing) {
                velocity.setY(Math.max(velocity.getY() - 0.1, -1.0));
            }

            if (state == 1) { // Moving forward
                if (drifting) {
                    // Apply drift movement (sideways slip)
                    Vector sideways = new Vector(-direction.getZ(), 0, direction.getX()).multiply(0.8);
                    velocity.add(sideways);

                    // Check if player held drift long enough for a boost
                    long driftDuration = System.currentTimeMillis() - driftStartTime.getOrDefault(player, 0L);
                    if (driftDuration > 1000) { // 1 second drift grants boost
                        velocity.add(direction.multiply(0.3)); // Small boost
                    }
                } else {
                    velocity.add(direction.multiply(0.1)); // Smooth acceleration
                }
            } else if (state == -1) { // Moving backward
                velocity.add(direction.multiply(-0.08)); // Slower backward speed
            } else {
                velocity.multiply(0.95); // Gradual slowdown
            }

            boat.setVelocity(velocity);
        }
    }.runTaskTimer(plugin, 0L, 1L);
}
