import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import org.bukkit.*;
import org.bukkit.entity.ArmorStand;
import org.bukkit.entity.Boat;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.util.Vector;

import java.util.HashMap;
import java.util.Map;

public class MinecartHandler {
    private final JavaPlugin plugin;
    private final ProtocolManager protocolManager;
    private final DatabaseHandler db;

    private final Map<Player, Integer> movementState = new HashMap<>();
    private final Map<Player, Boolean> isDrifting = new HashMap<>();
    private final Map<Player, Long> driftStartTime = new HashMap<>();
    private final Map<Player, Float> turnState = new HashMap<>();

    public MinecartHandler(JavaPlugin plugin, DatabaseHandler db) {
        this.plugin = plugin;
        this.db = db;
        this.protocolManager = ProtocolLibrary.getProtocolManager();
    }

    public void PutPlayerInCart(Player player, boolean useBirchBoat) {
        Location loc = player.getLocation();
        Boat boat = (Boat) player.getWorld().spawnEntity(loc, useBirchBoat ? EntityType.BIRCH_BOAT : EntityType.ACACIA_BOAT);
        boat.setSilent(true);
        boat.setInvulnerable(true);
        boat.addPassenger(player);
        boat.setGravity(false); // Gravity disabled to prevent falling on slopes

        spawnKartModel(player, boat);
    }

    private void spawnKartModel(Player player, Boat boat) {
        // Get player's kart skin selection
        int cartChoice = db.GetPlayerBoatColor(player);
        int modelData = switch (cartChoice) {
            case 1 -> 123456;
            case 2 -> 123457;
            case 3 -> 123458;
            case 4 -> 123459;
            default -> 123456;
        };

        Location loc = boat.getLocation().clone().add(0, 0, 0);

        ArmorStand stand = (ArmorStand) boat.getWorld().spawnEntity(loc, EntityType.ARMOR_STAND);
        stand.setInvisible(true);
        stand.setMarker(true);
        stand.setGravity(false);
        stand.setInvulnerable(true);
        stand.setSilent(true);

        // Attach the custom model item to the ArmorStand
        ItemStack modelItem = new ItemStack(Material.CARROT_ON_A_STICK);
        ItemMeta meta = modelItem.getItemMeta();
        if (meta != null) {
            meta.setCustomModelData(modelData);
            modelItem.setItemMeta(meta);
        }
        stand.setHelmet(modelItem);

        // Synchronize ArmorStand's position to stay in front of the boat
        new BukkitRunnable() {
            @Override
            public void run() {
                if (!boat.isValid() || !stand.isValid() || !player.isOnline()) {
                    this.cancel();
                    return;
                }

                // Normalize direction and clamp Y so it doesn't fly upward
                Vector lookDir = boat.getLocation().getDirection().clone();
                lookDir.setY(0);
                lookDir.normalize();

                Location predicted = boat.getLocation().clone()
                        .add(lookDir.multiply(3))
                        .add(0, -0.9, 0);
                predicted.setYaw(boat.getLocation().getYaw());

                stand.teleport(predicted);
            }
        }.runTaskTimer(plugin, 0L, 1L);

        startKartControl(player, boat);
    }

    private void startKartControl(Player player, Boat boat) {
        Map<Player, Boolean> isClimbing = new HashMap<>();

        // Listen for player input (forward, backward, drifting, turning)
        protocolManager.addPacketListener(new PacketAdapter(plugin, ListenerPriority.NORMAL, PacketType.Play.Client.STEER_VEHICLE) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.getPlayer() != player) return;

                PacketContainer packet = event.getPacket();
                StructureModifier<Boolean> booleans = packet.getStructures().read(0).getBooleans();
                StructureModifier<Float> floats = packet.getFloat();

                if (booleans == null) return;

                boolean forward = booleans.read(0);
                boolean backward = booleans.read(1);
                boolean drifting = booleans.read(2);
                Float sideways = floats.readSafely(0);

                // Forward/Backward movement handling
                if (forward) {
                    movementState.put(player, 1);

                    // Look direction but ignore Y-axis (no flying)
                    Vector direction = player.getLocation().getDirection().clone();
                    direction.setY(0);
                    direction.normalize();

                    // Climb check
                    Location boatLoc = boat.getLocation();
                    Location frontLoc = boatLoc.clone().add(direction.clone().multiply(1.2));
                    frontLoc.setY(boatLoc.getY());

                    boolean needsToClimb = false;

                    if (!frontLoc.getBlock().isPassable()) {
                        Location aboveFrontLoc = frontLoc.clone().add(0, 1, 0);
                        if (aboveFrontLoc.getBlock().isPassable()) {
                            needsToClimb = true;
                        }
                    }

                    Material frontBlockType = frontLoc.getBlock().getType();
                    if (frontBlockType.name().contains("STAIRS") || frontBlockType.name().contains("SLAB") || frontBlockType.name().contains("STEP")) {
                        needsToClimb = true;
                    }
                    if (frontBlockType.name().contains("WOOL")) {
                        needsToClimb = false;
                    }

                    isClimbing.put(player, needsToClimb);
                } else if (backward) {
                    movementState.put(player, -1);
                    isClimbing.put(player, false);
                } else {
                    movementState.put(player, 0);
                    isClimbing.put(player, false);
                }

                // Drift boost logic
                if (drifting && !isDrifting.getOrDefault(player, false)) {
                    isDrifting.put(player, true);
                    driftStartTime.put(player, System.currentTimeMillis());
                }

                if (!drifting && isDrifting.getOrDefault(player, false)) {
                    isDrifting.put(player, false);
                    long driftTime = System.currentTimeMillis() - driftStartTime.getOrDefault(player, 0L);
                    if (driftTime >= 1000) {
                        // Drift boost (with vertical movement prevented)
                        Vector boost = player.getLocation().getDirection().clone();
                        boost.setY(0);
                        boost.normalize().multiply(2.5);
                        boat.setVelocity(boost);
                        player.sendMessage(ChatColor.AQUA + "Drift Boost!");
                    }
                }

                if (sideways != null) {
                    turnState.put(player, sideways);
                }
            }
        });

        // Apply physics to boat every tick
        new BukkitRunnable() {
            @Override
            public void run() {
                if (boat.isDead() || !player.isInsideVehicle() || !(player.getVehicle() instanceof Boat)) {
                    this.cancel();
                    movementState.remove(player);
                    isClimbing.remove(player);
                    turnState.remove(player);
                    boat.remove();
                    player.teleport(new Location(player.getWorld(), -24, -60, 574)); // failsafe
                    return;
                }

                int state = movementState.getOrDefault(player, 0);
                float turnAmount = turnState.getOrDefault(player, 0f);

                Vector direction = player.getLocation().getDirection().clone();
                direction.setY(0);
                direction.normalize();

                Location front = boat.getLocation().clone().add(direction.clone().multiply(1.2));
                front.setY(boat.getLocation().getY());
                Material block = front.getBlock().getType();

                boolean climb = false;
                if (!front.getBlock().isPassable()) {
                    Location above = front.clone().add(0, 1, 0);
                    if (above.getBlock().isPassable()) climb = true;
                }
                if (block.name().contains("STAIRS") || block.name().contains("SLAB")) {
                    climb = true;
                }
                if (block.name().contains("WOOL")) {
                    climb = false;
                }

                isClimbing.put(player, climb);

                Vector dir = direction.clone();

                // Apply turning if player is pressing A/D
                if (turnAmount != 0) {
                    float yaw = player.getLocation().getYaw() + (turnAmount * 4);
                    Location newLoc = player.getLocation().clone();
                    newLoc.setYaw(yaw);
                    dir = newLoc.getDirection().clone();
                    dir.setY(0);
                    dir.normalize();
                }

                // Apply forward/backward motion
                if (state == 1) {
                    if (climb && boat.getVelocity().getY() < 0.5) {
                        boat.setVelocity(dir.multiply(4.0).setY(0.6));
                    } else {
                        Vector current = boat.getVelocity();
                        Vector target = dir.multiply(1.5);
                        Vector smooth = current.multiply(0.2).add(target.multiply(0.9));
                        boat.setVelocity(smooth);
                    }
                    boat.getWorld().spawnParticle(Particle.CLOUD, boat.getLocation(), 4, 0.2, 0.2, 0.2, 0.01);
                } else if (state == -1) {
                    boat.setVelocity(dir.multiply(-1.1));
                } else {
                    boat.setVelocity(boat.getVelocity().multiply(0.8)); // natural friction
                }
            }
        }.runTaskTimer(plugin, 0L, 1L);
    }
}
